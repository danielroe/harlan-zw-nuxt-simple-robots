import { addComponent, addImports, addServerHandler, addTemplate, createResolver, defineNuxtModule } from '@nuxt/kit'

export interface ModuleOptions {
  indexable?: boolean
  /**
   * Path to the sitemap.xml file, if it exists.
   */
  sitemap?: string | string[]
  disallow?: string | string[]
  robotsEnabledValue?: string
  robotsDisabledValue?: string
}

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name: 'nuxt-simple-robots',
    compatibility: {
      nuxt: '^3.0.0',
      bridge: false,
    },
    configKey: 'robots',
  },
  defaults(nuxt) {
    let indexable = true
    if (typeof process.env.NUXT_INDEXABLE !== 'undefined')
      indexable = String(process.env.NUXT_INDEXABLE) !== 'false'
    else if (typeof nuxt.options.runtimeConfig.indexable !== 'undefined')
      indexable = String(nuxt.options.runtimeConfig.indexable) !== 'false'
    else if (process.env.NODE_ENV !== 'production')
      indexable = false
    return {
      indexable,
      robotsEnabledValue: 'index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1',
      robotsDisabledValue: 'noindex, nofollow',
    }
  },
  async setup(config, nuxt) {
    const { resolve } = createResolver(import.meta.url)

    config.indexable = String(config.indexable) !== 'false'

    // paths.d.ts
    addTemplate({
      filename: 'nuxt-simple-robots.d.ts',
      getContents: () => {
        return `// Generated by nuxt-simple-robots
import { ModuleOptions } from 'nuxt-simple-robots'

interface NuxtSimpleRobotsNitroRules {
  index?: boolean
}
declare module 'nitropack' {
  interface NitroRouteRules extends NuxtSimpleRobotsNitroRules {}
  interface NitroRouteConfig extends NuxtSimpleRobotsNitroRules {}
}
declare module 'nuxt-simple-robots/config' {
  const config : ModuleOptions
  export default config
}
declare module '#nuxt-simple-robots/config' {
  const config : ModuleOptions
  export default config
}
export {}
`
      },
    })

    nuxt.hooks.hook('prepare:types', ({ references }) => {
      references.push({ path: resolve(nuxt.options.buildDir, 'nuxt-simple-robots.d.ts') })
    })

    nuxt.hooks.hook('nitro:init', async (nitro) => {
      nitro.options.prerender.routes = nitro.options.prerender.routes || []
      nitro.options.prerender.routes.push('/robots.txt')
    })

    const exports = `const config = ${JSON.stringify(config, null, 2)};\nexport default config`
    // add alias for nuxt app
    const dst = addTemplate({
      filename: 'nuxt-simple-robots.mjs',
      getContents: () => exports,
    })
    nuxt.options.alias['#nuxt-simple-robots/config'] = dst.dst

    nuxt.hooks.hook('nitro:config', (nitroConfig) => {
      // config
      nitroConfig.virtual!['nuxt-simple-robots/config'] = exports
    })

    addImports({
      name: 'defineRobotMeta',
      from: resolve('./runtime/composables/defineRobotMeta'),
    })

    await addComponent({
      name: 'RobotMeta',
      filePath: resolve('./runtime/components/RobotMeta'),
    })

    // add robots.txt server handler
    addServerHandler({
      route: '/robots.txt',
      handler: resolve('./runtime/server/robots-route'),
    })
    // add robots HTTP header handler
    addServerHandler({
      handler: resolve('./runtime/server/robots-middleware'),
    })
  },
})
